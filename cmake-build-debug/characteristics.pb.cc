// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: characteristics.proto

#include "characteristics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class CharacteristicsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacteristicsProto> _instance;
} _CharacteristicsProto_default_instance_;
static void InitDefaultsscc_info_CharacteristicsProto_characteristics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CharacteristicsProto_default_instance_;
    new (ptr) ::CharacteristicsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CharacteristicsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacteristicsProto_characteristics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CharacteristicsProto_characteristics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_characteristics_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_characteristics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_characteristics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_characteristics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, memory_capacity_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, frequency_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, minimal_frequency_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, maximal_frequency_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, cores_number_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, cooler_flag_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, max_ram_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, socket_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, capacity_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, turns_per_minute_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, ssd_flag_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, core_frequency_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, memory_frequency_),
  PROTOBUF_FIELD_OFFSET(::CharacteristicsProto, display_ports_num_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CharacteristicsProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CharacteristicsProto_default_instance_),
};

const char descriptor_table_protodef_characteristics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025characteristics.proto\"\317\002\n\024Characterist"
  "icsProto\022\027\n\017memory_capacity\030\001 \001(\r\022\021\n\tfre"
  "quency\030\002 \001(\r\022\031\n\021minimal_frequency\030\003 \001(\001\022"
  "\031\n\021maximal_frequency\030\004 \001(\001\022\024\n\014cores_numb"
  "er\030\005 \001(\r\022\023\n\013cooler_flag\030\006 \001(\010\022\017\n\007max_ram"
  "\030\007 \001(\r\022\016\n\006socket\030\010 \001(\t\022\020\n\010capacity\030\t \001(\r"
  "\022\030\n\020turns_per_minute\030\n \001(\r\022\020\n\010ssd_flag\030\013"
  " \001(\010\022\026\n\016core_frequency\030\014 \001(\r\022\030\n\020memory_f"
  "requency\030\r \001(\r\022\031\n\021display_ports_num\030\016 \001("
  "\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_characteristics_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_characteristics_2eproto_sccs[1] = {
  &scc_info_CharacteristicsProto_characteristics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_characteristics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_characteristics_2eproto = {
  false, false, descriptor_table_protodef_characteristics_2eproto, "characteristics.proto", 369,
  &descriptor_table_characteristics_2eproto_once, descriptor_table_characteristics_2eproto_sccs, descriptor_table_characteristics_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_characteristics_2eproto::offsets,
  file_level_metadata_characteristics_2eproto, 1, file_level_enum_descriptors_characteristics_2eproto, file_level_service_descriptors_characteristics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_characteristics_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_characteristics_2eproto)), true);

// ===================================================================

void CharacteristicsProto::InitAsDefaultInstance() {
}
class CharacteristicsProto::_Internal {
 public:
};

CharacteristicsProto::CharacteristicsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CharacteristicsProto)
}
CharacteristicsProto::CharacteristicsProto(const CharacteristicsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  socket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_socket().empty()) {
    socket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_socket(),
      GetArena());
  }
  ::memcpy(&memory_capacity_, &from.memory_capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_ports_num_) -
    reinterpret_cast<char*>(&memory_capacity_)) + sizeof(display_ports_num_));
  // @@protoc_insertion_point(copy_constructor:CharacteristicsProto)
}

void CharacteristicsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CharacteristicsProto_characteristics_2eproto.base);
  socket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&memory_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_ports_num_) -
      reinterpret_cast<char*>(&memory_capacity_)) + sizeof(display_ports_num_));
}

CharacteristicsProto::~CharacteristicsProto() {
  // @@protoc_insertion_point(destructor:CharacteristicsProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CharacteristicsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  socket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CharacteristicsProto::ArenaDtor(void* object) {
  CharacteristicsProto* _this = reinterpret_cast< CharacteristicsProto* >(object);
  (void)_this;
}
void CharacteristicsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacteristicsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacteristicsProto& CharacteristicsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacteristicsProto_characteristics_2eproto.base);
  return *internal_default_instance();
}


void CharacteristicsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CharacteristicsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&memory_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_ports_num_) -
      reinterpret_cast<char*>(&memory_capacity_)) + sizeof(display_ports_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacteristicsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 memory_capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          memory_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double minimal_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          minimal_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maximal_frequency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          maximal_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 cores_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cores_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cooler_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cooler_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_ram = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_ram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string socket = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_socket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CharacteristicsProto.socket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 capacity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 turns_per_minute = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          turns_per_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ssd_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ssd_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 core_frequency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          core_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_frequency = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          memory_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 display_ports_num = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          display_ports_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacteristicsProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacteristicsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 memory_capacity = 1;
  if (this->memory_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_memory_capacity(), target);
  }

  // uint32 frequency = 2;
  if (this->frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frequency(), target);
  }

  // double minimal_frequency = 3;
  if (!(this->minimal_frequency() <= 0 && this->minimal_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_minimal_frequency(), target);
  }

  // double maximal_frequency = 4;
  if (!(this->maximal_frequency() <= 0 && this->maximal_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_maximal_frequency(), target);
  }

  // uint32 cores_number = 5;
  if (this->cores_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cores_number(), target);
  }

  // bool cooler_flag = 6;
  if (this->cooler_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cooler_flag(), target);
  }

  // uint32 max_ram = 7;
  if (this->max_ram() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_ram(), target);
  }

  // string socket = 8;
  if (this->socket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_socket().data(), static_cast<int>(this->_internal_socket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CharacteristicsProto.socket");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_socket(), target);
  }

  // uint32 capacity = 9;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_capacity(), target);
  }

  // uint32 turns_per_minute = 10;
  if (this->turns_per_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_turns_per_minute(), target);
  }

  // bool ssd_flag = 11;
  if (this->ssd_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_ssd_flag(), target);
  }

  // uint32 core_frequency = 12;
  if (this->core_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_core_frequency(), target);
  }

  // uint32 memory_frequency = 13;
  if (this->memory_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_memory_frequency(), target);
  }

  // uint32 display_ports_num = 14;
  if (this->display_ports_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_display_ports_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacteristicsProto)
  return target;
}

size_t CharacteristicsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CharacteristicsProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string socket = 8;
  if (this->socket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_socket());
  }

  // uint32 memory_capacity = 1;
  if (this->memory_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_capacity());
  }

  // uint32 frequency = 2;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency());
  }

  // double minimal_frequency = 3;
  if (!(this->minimal_frequency() <= 0 && this->minimal_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double maximal_frequency = 4;
  if (!(this->maximal_frequency() <= 0 && this->maximal_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 cores_number = 5;
  if (this->cores_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cores_number());
  }

  // uint32 max_ram = 7;
  if (this->max_ram() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_ram());
  }

  // bool cooler_flag = 6;
  if (this->cooler_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool ssd_flag = 11;
  if (this->ssd_flag() != 0) {
    total_size += 1 + 1;
  }

  // uint32 capacity = 9;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_capacity());
  }

  // uint32 turns_per_minute = 10;
  if (this->turns_per_minute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_turns_per_minute());
  }

  // uint32 core_frequency = 12;
  if (this->core_frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_core_frequency());
  }

  // uint32 memory_frequency = 13;
  if (this->memory_frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_frequency());
  }

  // uint32 display_ports_num = 14;
  if (this->display_ports_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_display_ports_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacteristicsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CharacteristicsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacteristicsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacteristicsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CharacteristicsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CharacteristicsProto)
    MergeFrom(*source);
  }
}

void CharacteristicsProto::MergeFrom(const CharacteristicsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CharacteristicsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.socket().size() > 0) {
    _internal_set_socket(from._internal_socket());
  }
  if (from.memory_capacity() != 0) {
    _internal_set_memory_capacity(from._internal_memory_capacity());
  }
  if (from.frequency() != 0) {
    _internal_set_frequency(from._internal_frequency());
  }
  if (!(from.minimal_frequency() <= 0 && from.minimal_frequency() >= 0)) {
    _internal_set_minimal_frequency(from._internal_minimal_frequency());
  }
  if (!(from.maximal_frequency() <= 0 && from.maximal_frequency() >= 0)) {
    _internal_set_maximal_frequency(from._internal_maximal_frequency());
  }
  if (from.cores_number() != 0) {
    _internal_set_cores_number(from._internal_cores_number());
  }
  if (from.max_ram() != 0) {
    _internal_set_max_ram(from._internal_max_ram());
  }
  if (from.cooler_flag() != 0) {
    _internal_set_cooler_flag(from._internal_cooler_flag());
  }
  if (from.ssd_flag() != 0) {
    _internal_set_ssd_flag(from._internal_ssd_flag());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.turns_per_minute() != 0) {
    _internal_set_turns_per_minute(from._internal_turns_per_minute());
  }
  if (from.core_frequency() != 0) {
    _internal_set_core_frequency(from._internal_core_frequency());
  }
  if (from.memory_frequency() != 0) {
    _internal_set_memory_frequency(from._internal_memory_frequency());
  }
  if (from.display_ports_num() != 0) {
    _internal_set_display_ports_num(from._internal_display_ports_num());
  }
}

void CharacteristicsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CharacteristicsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacteristicsProto::CopyFrom(const CharacteristicsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CharacteristicsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacteristicsProto::IsInitialized() const {
  return true;
}

void CharacteristicsProto::InternalSwap(CharacteristicsProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  socket_.Swap(&other->socket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacteristicsProto, display_ports_num_)
      + sizeof(CharacteristicsProto::display_ports_num_)
      - PROTOBUF_FIELD_OFFSET(CharacteristicsProto, memory_capacity_)>(
          reinterpret_cast<char*>(&memory_capacity_),
          reinterpret_cast<char*>(&other->memory_capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacteristicsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CharacteristicsProto* Arena::CreateMaybeMessage< ::CharacteristicsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CharacteristicsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
